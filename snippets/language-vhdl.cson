'.source.vhdl':
  'vhdl template':
    'prefix': 'vhdl'
    'body': 'library ieee;\n\tuse ieee.std_logic_1164.all;\n\tuse ieee.numeric_std.all;\n\nentity $1 is\n  port (\n\t${0:clock}\n  );\nend entity;\n\narchitecture ${2:arch} of $1 is\n\nbegin\n\nend architecture;'

  'architecture':
    'prefix': 'arch'
    'body': 'architecture ${1:arch} of ${2:entity} is\n\n\tsignal $0\n\nbegin\n\nend architecture;'

  'entity':
    'prefix': 'ent'
    'body': 'entity $1 is\n  port (\n\t${0:clock}\n  );\nend entity;'
  'entity architecture':
    'prefix': 'entarch'
    'body': 'entity $1 is\n  port (\n\t${0:clock}\n  );\nend entity;\n\narchitecture ${2:arch} of $1 is\n\n\n\nbegin\n\n\n\nend architecture;'

  'asynchronous process':
    'prefix': 'proa'
    'body': '${1:identifier} : process(${2:clock}, ${3:reset})\nbegin\n\tif ${3:reset} = \'1\' then\n\t\t$0\n\telsif rising_edge(${2:clock}) then\n\t\t\n\tend if;\nend process;'
  'process':
    'prefix': 'pro'
    'body': '${1:identifier} : process(${2:sensitivity_list})\nbegin\n\t$0\nend process;'
  'synchronous process':
    'prefix': 'pros'
    'body': '${1:identifier} : process(${2:clock})\nbegin\n\tif rising_edge(${2:clock}) then\n\t\t$0\n\tend if;\nend process;'

  'port map':
    'prefix': 'portmap'
    'body': 'PORT MAP(\n\t$0\n);'
  'component':
    'prefix': 'comp'
    'body': 'COMPONENT ${1:entity} IS\n\tPORT(\n\t\t$0\n\t);\nEND COMPONENT;'
  'entity component':
      'prefix': 'entcomp'
      'body': '${1:identifier} : ENTITY WORK.${2:ENTITY_NAME}(${3:BEHAVIOR})\nPORT MAP(\n\t$0\n);'

  'case':
    'prefix': 'case'
    'body': 'case( ${1:signal_name} ) is\n\n\twhen ${2:IDLE} =>\n\t\t$0\n\n\twhen others =>\n\nend case;'
  'else':
    'prefix': 'else'
    'body': 'else\n\t$0'
  'elsif':
    'prefix': 'elsif'
    'body': 'elsif ${1:expression} then\n\t$0'
  'if':
    'prefix': 'if'
    'body': 'if ${1:expression} then\n\t$0\nend if;'

  'for loop':
    'prefix': 'for'
    'body': '${1:identifier} : for ${2:i} in ${3:0} to ${4:10} loop\n\t$0\nend loop;'
  'while':
    'prefix': 'while'
    'body': '${1:identifier} : while ${2:expression} loop\n\t$0\nend loop;'

  'signed downto':
    'prefix': 'signed_t'
    'body': 'signed(${1:x} downto ${2:0});$0'
  'std_logic_vector downto':
    'prefix': 'std_logic_vector_t'
    'body': 'std_logic_vector(${1:x} downto ${2:0});$0'
  'unsigned downto':
    'prefix': 'unsigned_t'
    'body': 'unsigned(${1:x} downto ${2:0});$0'
  'integer range':
    'prefix': 'integer_t'
    'body': 'INTEGER RANGE ${1:low} TO ${2:high};$0'

  'signed range':
    'prefix': 'sr'
    'body': 'signed(${1:signal}\'range);$0'
  'std_logic_vector range':
    'prefix': 'slvr'
    'body': 'std_logic_vector(${1:signal}\'range);$0'
  'unsigned range':
    'prefix': 'usr'
    'body': 'unsigned(${1:signal}\'range);$0'

  'for generate':
    'prefix': 'forg'
    'body': '${1:identifier} : for ${2:i} in ${3:x} to ${4:y} generate\n\t$0\nend generate;'
  'if generate':
    'prefix': 'ifg'
    'body': '${1:identifier} : if ${2:i} generate\n\t$0\nend generate;'
  'package':
    'prefix': 'pack'
    'body': 'package $1 is\n\t$0\nend package;'
